Pseudo Code
Assignment1: Part2

PROBLEM OVERVIEW:
This script will need to move through 4 files in parralell, two with biological sequence data in both a R1 and R2 direction, and two with indices reverse complimented of eachother. The program will need to determine if the indices are a perfect match, and too low quality (contain N's), or are "hopped" indices and do not match.
Based on this, it will parse the read 1 data and read 4 data into different files (see bellow) after appending the index to the eand of each reads header in the following format @HEADER INDEX1-(REVCOMP(INDEX2))

Open and create apropriate files
    -> want to read input files in parallel 
    Starting File Location: /projects/bgmp/shared/2017_sequencing
    # 1294_S1_L008_R1_001.fastq.gz -> R1 Biological sequence (101 bp)
    # 1294_S1_L008_R2_001.fastq.gz -> R2 Index (8 bp)
    # 1294_S1_L008_R3_001.fastq.gz -> R3 Index (8 bp)
    # 1294_S1_L008_R4_001.fastq.gz -> R4 Biological Sequence (101 bp)

    -> Need to create >= 6 files:
        - R1 $ R2 FASTQ files for matching/high quality indices (24 for each read)
                -R1_Index 1-24.fq
                -R2_Index 1-24.fq
        - R1 $ R2 FASTQ files for low quality indices (2 total files)
            -R1_lowq.fq
            -R2_lowq.fq
        - R1 $ R2 FASTQ files for hopped indices (2 total files)
            -R1_hopped.fq
            -R2_hopped.fq

PROBLEM: Need Index2 R3 reverse complimented to Index1 R2. I suspect it will make for easier comparison 

REVERSE FUNCTION OPTIONS
def reverse_string(x):
    """This function takes a string and reverses it, can re-variable reversed string"""
    return x[::-1]

"""Check that reverse sring function actually gives you a reversed string from a given string"""
assert reverse_string("hello") == hello, "Reverse 'hello' didnt work"
assert reverse_string("how are you") == uoy era how, "Reverse 'how are you' didnt work"
print("Your reverse_string function is working! Nice job")

def reverse_comp(dna_seq): -> kown as RVC for the rest of this pseudo code
    """This function takes a string of DNA, turns it into its reverse compliment using a dictionary of complimentary base pairs"""
    complement_dict = {'A': 'T', 'T': 'A', 'C': 'G', 'G': 'C'}
    reverse_comp_seq = ''.join(complement_dict[base] for base in reversed(dna_seqe))
    return reverse_comp_seqPass

"""Check that reverse_comp function actually gives you a reversed complimentary nucleotide sequence"""
Input: AATTCCGG
Output: CCGGAATT

General idea:

Initialize dictionaries:

R1lowq_dict = {}
R4lowq_dict = {}
Keys = indices
Values = [header, seq, qscore]

R1hopped_dict = {}
R4hopped_dict = {}
Keys = indices
Values = [header, seq, qscore]

R1matched_dict = {}
R4matched_dict = {}
Keys = indices
Values = [header, seq, qscore]

In a loop:
-open/read inputs in parallel (R1,R2, R3, R4)
-readline and assign the general layout: (Q: how do we separate these by file, keep \n as separator? AKA dont strip? Probably split function by \n!!)
    - Header -> split it, individual variables
    - Sequence -> "
    - Comment -> "
    - Quality -> "
- Look at R2 Seq and R3 seq and see if there are any Ns:
    -If N is seen in either:
        -New variabel for index1 and index2 ->  lowq_index1, lowq_index2
        -Append Index1 : R1 Header, seq, qual to R1lowq_dict
        -Append Index2* : R4 Header, seq, qual to R4lowq_dict
        -Return both dictionaries 
*Need to look at the R1 and R2 indices here rather than reverse compliment and compare, because N will fail reverse_comp function, and we dont want to append a reverse complimented index2, but we MAY want to append a simple reversed (reverse_string) index2 to the end of R1 and R4 headers
    -or else compare R2 Seq and RCV(R3 seq) iff dont match:
        -New variabel for index1 and index2 -> hopped_index1, hopped_index2
        -Append hopped_index1 : R1 Header, seq, qual to R1hopped_dict
        -Append RVC(hopped_index2) : R4 Header, seq, qual to R4hopped_dict
        - return both dictionaries
*Given we have removed all reads with low quality or hopped indices, we can assume the ones that get to this point are matched:
            -Open output files (consider argparse here so we dont have to with open all 52 files? And so you can label output)
                -Append R2 seq and RVC(R3 seq) to the end of R1 header -> appended R1 header (fstring need "-" btw indices)
                -write to R1_{R2 seq}.fq
                    -appended R1 header
                    -R1 seq
                    -+
                    -R1 qscores
                -Append R2 seq and RVC(R3 seq) to the end of R4 header -> appended R4 header
                -write to R4_{R2 seq}.fq
                    -appended R4 header
                    -R4 seq
                    -+
                    -R4 qscores
                *Make sure you are writing to the bottom of the file, not overtop

*Im forgetting if you can now access the dictionaries outside of the loop, BUT we are going to assume you can
Time to take all the stuff back out the dictionaries and write to a file
R1lowq_dict = {} -> write to R1_lowq.fq
R4lowq_dict = {} -> write to R4_lowq.fq

R1hopped_dict = {} -> write to R1_hopped.fq
R4hopped_dict = {} -> write to R4_hopped.fq

WC -l final files and return information with some fancy "Your R1_Index7 file has: 400000 reads"